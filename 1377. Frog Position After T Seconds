class Solution {
public:
    double frogPosition(int n, vector<vector<int>>& edges, int t, int target) {
        vector<unordered_set<int>> adj(edges.size()+2,unordered_set<int>());
        for (int i = 0; i < edges.size(); i++) {
            adj[edges[i][0]].insert(edges[i][1]);
            adj[edges[i][1]].insert(edges[i][0]);
        }
        int curr = 1;
        int reciprocal = dfs(adj, curr, target, t);
        
        if (reciprocal > 0) return 1.0/reciprocal; 
        else return 0;
    }
    int dfs(vector<unordered_set<int>> &adj, int curr, int target, int t) {
        if (t < 0) {
            return 0;
        }
        if (curr == target) {
            if (t>0 && !adj[curr].empty()) return -1;  
            return 1;
        }
        for (auto i:adj[curr]) {
            adj[i].erase(curr);
            int temp = dfs(adj, i, target, t-1);
            if (temp == -1) return -1;
            if (temp > 0) return temp * adj[curr].size();
        }
        return 0;
    }
};
